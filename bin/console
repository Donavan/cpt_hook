#!/usr/bin/env ruby

require "bundler/setup"
require "cpt_hook"
require "pry"


my_hooks = CptHook.define_hooks do
  # Simple case call one fn with args
  before(:some_fn).call(:my_hook).with(:var1, :var2)

  # Complex case, add multiple calls to the fn block style
  after(:some_other_fn) do
    call(:my_other_hook).with(:var3, :var4)
    call(:yet_another_hook)
    call( lambda { | hooked_obj | hooked_obj.some_fn }).with(:self)
  end

  # Complex case, add multiple calls to the fn fluent style
  before(:some_other_fn).call(:my_other_hook).with(:var3, :var4)
                        .call(:yet_another_hook)
                        .call( lambda { | hooked_obj | hooked_obj.some_fn }).with(:self)

end


class ResTest
  def ext_res_fn
    puts 'Resolved external context'
  end
end

class TestClass
  def res_fn
    puts 'Resolved internal context'
  end

  def test_fn
    puts 'test_fn'
  end
end

external_context = ResTest.new

c = TestClass.new

test_hooks = CptHook.define_hooks do
  before(:test_fn).call(:res_fn)
end

test_hooks2 = CptHook.define_hooks do
  before(:test_fn).call(:res_fn).call(:ext_res_fn).using( lambda { return external_context })
end

hooked = CptHook::Hookable.new(c, test_hooks.merge!(test_hooks2))
hooked.test_fn
binding.pry

puts 'Console exiting'  # This is just to ensure a line exists below the pry
